#!/bin/python

import struct
from functools import partial
import os
import sys

def readshort(rom):
    return struct.unpack("<H", rom.read(2))[0]

def readbyte(rom):
    return struct.unpack("B", rom.read(1))[0]

def dump_tilemap(tilemap_bytes, table):
    tilemap = []
    for b in tilemap_bytes:
        if b in table:
            tilemap += table[b]
        else:
            tilemap += '\\x{:02x}'.format(b)
    return tilemap

MODE_LITERAL = 0
MODE_REPEAT = 1
MODE_INC = 2
MODE_DEC = 3
def decompress_tilemap(original):
    tmap = []
    rom = iter(original)
    for b in rom:
        if b == 0xfe:
            tmap.append(0xfe)
        else:
            command = (b >> 6) & 0b11
            count = b & 0b00111111
            if command == MODE_LITERAL:
                for i in range(count+1):
                    tmap.append(next(rom))
            elif command == MODE_REPEAT:
                byte = next(rom)
                for i in range(count+2):
                    tmap.append(byte)
            elif command == MODE_INC:
                byte = next(rom)
                for i in range(count+2):
                    tmap.append((byte+i)&0xff)
            elif command == MODE_DEC:
                byte = next(rom)
                for i in range(count+2):
                    tmap.append((byte-i)%0xff)
    ret = []
    for i,t in enumerate(tmap):
        if i != 0 and i % 0x20 == 0:
            ret.append(0xfe)
        ret.append(t)
    return ret

table = {}
for line in open("scripts/res/medarot.tbl", encoding = "utf-8").readlines():
    if line.strip():
        a, b = line.strip('\n').split("=", 1)
        table[int(a, 16)] = b.replace("\\n", '\n')

# tilemap bank is 1e (0x78000)
BANK_SIZE = 0x4000
BASE_ADDR = 0x78000
MAX_ADDR = BASE_ADDR + BANK_SIZE - 1

tilemap_ptr = {}
tilemap_bytes = {}
tilemap_files = []
with open("baserom.gbc", "rb") as rom:
    rom.seek(BASE_ADDR)
    for i in range(0xf0):
        tilemap_ptr[i] = readshort(rom)


    for i in sorted(tilemap_ptr):
        ptr = tilemap_ptr[i]
        addr = BASE_ADDR + ptr - BANK_SIZE
        rom.seek(addr)
        compressed = readbyte(rom)
        assert compressed in [0x0, 0x1], "Unexpected compression byte 0x{:02x}".format(compressed)
        print("{:02x} @ [{:04X} / {:08X}] {} | ".format(i, ptr, rom.tell()-1, "Compressed" if compressed else "Uncompressed"), end="")
        tilemap_bytes[i] = list(iter(partial(readbyte, rom), 0xFF)) # Read ROM until 0xFF
        # tilemaps are all adjacent to each other, so we don't need to do anything more than make sure they're sorted
        file_suffix = "{:04X}".format(ptr)
        if file_suffix not in tilemap_files:
            tilemap_files.append(file_suffix)
            with open("game/tilemaps/{}".format(file_suffix), "wb") as binary:
                binary.write(bytearray([compressed] + tilemap_bytes[i] + [0xFF]))
            with open("text/tilemaps/{}.txt".format(file_suffix), "w", encoding = "utf-8") as output:
                if compressed:
                    output.write("[DIRECT]\n")
                    tilemap_bytes[i] = decompress_tilemap(tilemap_bytes[i])
                else:
                    output.write("[OVERLAY]\n")
                output.write("".join(dump_tilemap(tilemap_bytes[i], table)))
                print("total length 0x{:02x}".format(len(tilemap_bytes[i])))
        else:
            print("Duplicate")

    tilemap_text = "" 
    with open("game/src/gfx/tilemap_files.asm", "w") as tf:
        tf.write("; initially auto-generated by {}\n".format(sys.argv[0]))
        # Pointer table
        for i in sorted(tilemap_ptr):
            tf.write("dw Tilemap_{:04X} ; Tilemap 0x{:02X}\n".format(tilemap_ptr[i], i))
        tf.write("\n")
        # INCBINs
        for f in tilemap_files:
            tf.write('Tilemap_{0}:\n  INCBIN "game/tilemaps/{0}"\n'.format(f))